const express = require('express');
const { Spot, Review, User, SpotImage } = require('../../db/models')
const { requireAuth } = require('../../utils/auth');
const { process_params } = require('express/lib/router');
const router = express.Router();

//Get all Spots
router.get('/', async (req, res)=> {
    const spots = await Spot.findAll({
        attributes: [
            'id',
            'ownerId',
            'address',
            'city',
            'state',
            'country',
            'lat',
            'lng',
            'name',
            'description',
            'price',
            'createdAt',
            'updatedAt',
            'avgRating',
            'previewImage'
        ]
    });

    
    //figure out how to calculate the avgRating for each spot 
    //create a data object that fits the expected output, add the avgRating to the data object
    //return res.json(data)
    
    return res.json({Spots: spots});
});

//Get all Spots owned by the Current User
router.get('/current', requireAuth, async (req, res) => {
    const spots = await Spot.findAll({
        where: {ownerId: req.user.id},
        attributes: [
            'id',
            'ownerId',
            'address',
            'city',
            'state',
            'country',
            'lat',
            'lng',
            'name',
            'description',
            'price',
            'createdAt',
            'updatedAt',
            'avgRating',
            'previewImage'
        ]
        
    })

    return res.json({Spots: spots})
})

//Get details of a Spot from an id
router.get('/:spotId', async (req, res) => {
    const { spotId } = req.params;
    //couldnt find spot if(!spot || ...)

    const spot = await Spot.findByPk(spotId, {
        include: [
            {
                model: SpotImage,
                attributes:['id', 'url', 'preview']
            },
            {
                model: User,
                as: 'Owner', //must obey the cards
                attributes: ['id', 'firstName', 'lastName']
            }

        ]
    });

    //get numReviews and Avg Rating
    const numReviews = await Review.count({
        where: {
            spotId: spotId
        }
    })

    const stars = await Review.findAll({
        where: {
            spotId: spotId
        }
    });

    let avgStarRating = 0;
    for(let i = 0; i < stars.length; i++){
        avgStarRating += stars[i];
    }
    avgStarRating = (avgStarRating/stars.length)

    
    
    const data= {
        id: spot.id,
        ownerId: spot.ownerId,
        address: spot.address,
        city: spot.city,
        state: spot.state,
        country: spot.country,
        lat: spot.lat,
        lng: spot.lng,
        name: spot.name,
        description: spot.description,
        price: spot.price,
        createdAt: spot.createdAt,
        updatedAt: spot.updatedAt,
        numReviews: numReviews,
        avgStarRating: avgStarRating,
        SpotImages: spot.SpotImages,
        Owner: spot.Owner
    }

    res.json(data)
})

//create a spot
router.post('/', requireAuth, async (req, res) => {
    const {address, city, state, country, lat, lng, name, description, price } = req.body;

    //body validation erros
    if(!address || !city || !state || !country || lat < -90 || lat > 90 || lng < -180 || lng > 180 ||name.length > 49 || !description || price < 0){
        return res.status(400).json({
            "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
            "errors": {
              "address": "Street address is required",
              "city": "City is required",
              "state": "State is required",
              "country": "Country is required",
              "lat": "Latitude must be within -90 and 90",
              "lng": "Longitude must be within -180 and 180",
              "name": "Name must be less than 50 characters",
              "description": "Description is required",
              "price": "Price per day must be a positive number"
            }
          })
    }
    
    //put this creation in a try catch block when you get it to work//
    const newSpot = await Spot.create({
        ownerId: req.user.id,
        address,
        city,
        state,
        country,
        lat,
        lng,
        name,
        description,
        price
    });

    return res.status(201).json(newSpot)
});

//Add an Image to a Spot based on the Spot's id
router.post('/:spotId/images', requireAuth, async (req, res) => {
    const { spotId } = req.params;
    const {url, preview} = req.body;

    const spot = await Spot.findByPk(spotId)

    //check if spot exists or if spot belongs to current user
    if(!spot || spot.ownerId !== req.user.id) {
        return res.status(404).json({
            message: "Spot couldn't be found"
        })
    };
    
    //create new image
    const newImage = await SpotImage.create({
        spotId,
        url,
        preview
    });

    //make a little data object to res.json
    const data = {
        id: newImage.spotId,
        url: newImage.url,
        preview: newImage.preview
    }


    return res.json(data)
});

//edit a spot
router.put('/:spotId', requireAuth, async (req, res) => {
    const { spotId } = req.params;
    const { address, city, state, country, lat, lng, name, description, price } = req.body;

    const spot = await Spot.findByPk(spotId);

    //check body validations errors
    if(!address || !city || !state || !country || lat < -90 || lat > 90 || lng < -180 || lng > 180 ||name.length > 49 || !description || price < 0){
        return res.status(400).json({
            "message": "Bad Request", // (or "Validation error" if generated by Sequelize),
            "errors": {
              "address": "Street address is required",
              "city": "City is required",
              "state": "State is required",
              "country": "Country is required",
              "lat": "Latitude must be within -90 and 90",
              "lng": "Longitude must be within -180 and 180",
              "name": "Name must be less than 50 characters",
              "description": "Description is required",
              "price": "Price per day must be a positive number"
            }
          })
    }

    //check if spot exists
    if(!spot) {
        return res.status(404).json({
            message: "Spot couldn't be found"
        })
    }

    //edit spot
    const updatedSpot = await spot.update({
        address,
        city,
        state,
        country, 
        lat,
        lng,
        name,
        description,
        price
    });
    

    return res.json(updatedSpot);
});

//delete a spot
router.delete('/:spotId', requireAuth, async (req, res) => {
    const { spotId } = req.params;

    const spot = await Spot.findByPk(spotId);

    //check if spot exists or if spot belongs to current user
    if(!spot || spot.ownerId !== req.user.id) {
        return res.status(404).json({
            message: "Spot couldn't be found"
        })
    };

    // console.log(spot.ownerId, req.user.id)
    // if(spot.ownerId !== req.user.id) {
    //     return res.status(404).json({
    //         message: "Spot couldn't be found"
    //     })
    // }

    await spot.destroy();

    return res.json({
        "message": "Successfully deleted"
      });

})

module.exports = router;